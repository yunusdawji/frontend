{"version":3,"sources":["angularjs-gauge.min.js"],"names":["angular","gaugeMeterProviderFn","defaultOptions","size","value","undefined","min","max","cap","thick","type","foregroundColor","backgroundColor","duration","fractionSize","labelOnly","this","setOptions","customOptions","isObject","Error","merge","ngGauge","getOptions","extend","$get","gaugeMeterDirective","Gauge","element","options","find","text","legend","unit","context","getContext","init","prototype","setupStyles","create","canvas","width","height","lineCap","lineWidth","lfs","llh","css","display","fontWeight","position","textAlign","overflow","textOverflow","fontSize","lineHeight","textDecoration","opacity","fs","lh","parseInt","nv","ov","animate","timestamp","Date","getTime","runtime","startTime","progress","Math","previousProgress","middle","start","displacement","self","drawShell","tail","color","requestID","window","requestAnimationFrame","cancelAnimationFrame","getType","bounds","getBounds","getDuration","getMin","getMax","clamp","getValue","head","getForegroundColorByRange","PI","center","getCenter","radius","getRadius","getBackgroundColor","clear","beginPath","strokeStyle","arc","x","y","stroke","clearRect","getWidth","getHeight","update","destroy","getThickness","getForegroundColor","isNumber","isNaN","parseFloat","Number","match","Object","keys","thresholds","filter","item","sort","a","b","reverse","getLineCap","restrict","replace","template","scope","append","label","prepend","link","watchData","gauge","isDefined","equals","watchOther","defaults","$watch","$on","module","directive","provider","$inject"],"mappings":"CAAC,SAAUA,GACP,YAOA,SAASC,KACL,GAAIC,IACAC,KAAM,IACNC,UAAOC,GACPC,IAAK,EACLC,IAAK,IACLC,IAAK,OACLC,MAAO,EACPC,KAAM,OACNC,gBAAiB,uBACjBC,gBAAiB,qBACjBC,SAAU,KACVC,aAAc,KACdC,WAAW,EAGfC,MAAKC,WAAa,SAAUC,GACxB,IAAMA,IAAiBlB,EAAQmB,SAASD,GACpC,KAAM,IAAIE,OAAM,uDACpBlB,GAAiBF,EAAQqB,MAAMnB,EAAgBgB,GAGnD,IAAII,IACAC,WAAY,WACR,MAAOvB,GAAQwB,UAAWtB,IAIlCc,MAAKS,KAAO,WACR,MAAOH,IAMf,QAASI,GAAoBJ,GAGzB,GAQIK,GAAQ,SAAUC,EAASC,GAC3Bb,KAAKY,QAAUA,EAAQE,KAAK,UAAU,GACtCd,KAAKe,KAAOH,EAAQE,KAAK,QACzBd,KAAKgB,OAASJ,EAAQE,KAAK,KAC3Bd,KAAKiB,KAAOL,EAAQE,KAAK,KACzBd,KAAKkB,QAAUlB,KAAKY,QAAQO,WAAW,MACvCnB,KAAKa,QAAUA,EACfb,KAAKoB,OAwOT,OArOAT,GAAMU,WAEFD,KAAM,WACFpB,KAAKsB,cACLtB,KAAKuB,OAAO,KAAM,OAGtBD,YAAa,WAETtB,KAAKkB,QAAQM,OAAOC,MAAQzB,KAAKa,QAAQ1B,KACzCa,KAAKkB,QAAQM,OAAOE,OAAS1B,KAAKa,QAAQ1B,KAC1Ca,KAAKkB,QAAQS,QAAU3B,KAAKa,QAAQrB,IACpCQ,KAAKkB,QAAQU,UAAY5B,KAAKa,QAAQpB,KAEtC,IAAIoC,GAA0B,IAApB7B,KAAKa,QAAQ1B,KACnB2C,EAAM9B,KAAKa,QAAQ1B,IAEvBa,MAAKe,KAAKgB,KACNC,QAAS,eACTC,WAAY,SACZR,MAAO,OACPS,SAAU,WACVC,UAAW,SACXC,SAAU,SACVC,aAAc,WACdC,SAAUT,EAAM,KAChBU,WAAYT,EAAM,OAGtB9B,KAAKiB,KAAKc,KACNS,eAAgB,OAChBF,SAAU,QACVL,WAAY,IACZQ,QAAS,IAGb,IAAIC,GAAK1C,KAAKa,QAAQd,UAAkB,GAAN8B,EAAY7B,KAAKa,QAAQ1B,KAAO,GAC9DwD,EAAK3C,KAAKa,QAAQd,UAAY+B,EAAO,EAAIY,EAAME,SAAS5C,KAAKa,QAAQ1B,KAEzEa,MAAKgB,OAAOe,KACRC,QAAS,eACTP,MAAO,OACPS,SAAU,WACVC,UAAW,SACXC,SAAU,SACVC,aAAc,WACdJ,WAAY,SACZK,SAAUI,EAAK,KACfH,WAAYI,EAAK,QAGzBpB,OAAQ,SAAUsB,EAAIC,GAqBlB,QAASC,GAAQC,GACbA,EAAYA,IAAa,GAAIC,OAAOC,SACpC,IAAIC,GAAUH,EAAYI,EACtBC,EAAWC,KAAKhE,IAAI6D,EAAUtD,EAAU,GACxC0D,EAAmBT,EAAMA,EAAK7B,EAAQ,EACtCuC,EAASC,EAAQF,EAAmBG,EAAeL,CAEvDM,GAAKC,UAAUH,EAAOD,EAAQK,EAAMC,GAChCX,EAAUtD,EACVkE,EAAYC,OAAOC,sBAAsB,SAAUjB,GAC/CD,EAAQC,KAGZkB,qBAAqBH,GAhC7B,GAYIA,GACAX,EAbAO,EAAO3D,KACPN,EAAOM,KAAKmE,UACZC,EAASpE,KAAKqE,UAAU3E,GACxBG,EAAWG,KAAKsE,cAChBhF,EAAMU,KAAKuE,SACXhF,EAAMS,KAAKwE,SACXpF,EAAQY,KAAKyE,MAAMzE,KAAK0E,WAAYpF,EAAKC,GACzCkE,EAAQW,EAAOO,KACf1D,GAAQmD,EAAOP,KAAOO,EAAOO,OAASpF,EAAMD,GAC5CoE,EAAezC,GAAQ7B,EAAQE,GAC/BuE,EAAOO,EAAOP,KACdC,EAAQ9D,KAAK4E,0BAA0BxF,EAIvCyD,IAAMC,IACNY,EAAezC,EAAO4B,EAAK5B,EAAO6B,GAoBtCmB,sBAAsB,SAAUjB,GAC5BI,EAAYJ,IAAa,GAAIC,OAAOC,UACpCH,EAAQC,MAKhBqB,UAAW,SAAU3E,GACjB,GAAIiF,GAAMd,CAYV,OAXY,QAARnE,GACAiF,EAAOrB,KAAKuB,GACZhB,EAAO,EAAIP,KAAKuB,IACD,QAARnF,GACPiF,EAAO,IAAMrB,KAAKuB,GAClBhB,EAAO,IAAMP,KAAKuB,IACF,SAATnF,IACPiF,EAAO,GAAMrB,KAAKuB,GAClBhB,EAAO,IAAMP,KAAKuB,KAIlBF,KAAMA,EACNd,KAAMA,IAKdD,UAAW,SAAUH,EAAOD,EAAQK,EAAMC,GACtC,GACI5C,GAAUlB,KAAKkB,QACf4D,EAAS9E,KAAK+E,YACdC,EAAShF,KAAKiF,YACdtF,EAAkBmE,EAClBlE,EAAkBI,KAAKkF,oBAE3BlF,MAAKmF,QAEL3B,EAASF,KAAK/D,IAAIiE,EAAQC,GAC1BD,EAASF,KAAKhE,IAAIkE,EAAQK,GAG1B3C,EAAQkE,YACRlE,EAAQmE,YAAczF,EACtBsB,EAAQoE,IAAIR,EAAOS,EAAGT,EAAOU,EAAGR,EAAQxB,EAAQK,GAAM,GACtD3C,EAAQuE,SAERvE,EAAQkE,YACRlE,EAAQmE,YAAc1F,EACtBuB,EAAQoE,IAAIR,EAAOS,EAAGT,EAAOU,EAAGR,EAAQvB,EAAOD,GAAQ,GACvDtC,EAAQuE,UAIZN,MAAO,WACHnF,KAAKkB,QAAQwE,UAAU,EAAG,EAAG1F,KAAK2F,WAAY3F,KAAK4F,cAGvDC,OAAQ,SAAUhD,EAAIC,GAClB9C,KAAKuB,OAAOsB,EAAIC,IAGpBgD,QAAS,WACL9F,KAAKmF,SAGTF,UAAW,WAEP,MADajF,MAAK+E,YACJQ,EAAIvF,KAAK+F,gBAG3BhB,UAAW,WAGP,OACIQ,EAHIvF,KAAK2F,WAAa,EAItBH,EAHIxF,KAAK4F,YAAc,IAO/BlB,SAAU,WACN,MAAO1E,MAAKa,QAAQzB,OAExBmF,OAAQ,WACJ,MAAOvE,MAAKa,QAAQvB,KAExBkF,OAAQ,WACJ,MAAOxE,MAAKa,QAAQtB,KAExBoG,SAAU,WACN,MAAO3F,MAAKkB,QAAQM,OAAOC,OAG/BmE,UAAW,WACP,MAAO5F,MAAKkB,QAAQM,OAAOE,QAG/BqE,aAAc,WACV,MAAO/F,MAAKa,QAAQpB,OAGxByF,mBAAoB,WAChB,MAAOlF,MAAKa,QAAQjB,iBAGxBoG,mBAAoB,WAChB,MAAOhG,MAAKa,QAAQlB,iBAGxBiF,0BAA2B,SAAUxF,GAEjC,GAAI6G,GAAW,SAAU7G,GACrB,WAAgBC,IAATD,IAAuB8G,MAAMC,WAAW/G,MAAY8G,MAAME,OAAOhH,KAGxEiH,EAAQC,OAAOC,KAAKvG,KAAKa,QAAQ2F,YAChCC,OAAO,SAAUC,GAAQ,MAAOT,GAASS,IAASN,OAAOM,IAAStH,IAClEuH,KAAK,SAASC,EAAEC,GAAI,MAAOT,QAAOQ,GAAKR,OAAOS,KAAMC,UAAU,EAEnE,YAAiBzH,KAAVgH,EAAsBrG,KAAKa,QAAQ2F,WAAWH,GAAOvC,OAAS9D,KAAKgG,qBAAuBhG,KAAKgG,sBAG1Ge,WAAY,WACR,MAAO/G,MAAKa,QAAQrB,KAGxB2E,QAAS,WACL,MAAOnE,MAAKa,QAAQnB,MAGxB4E,YAAa,WACT,MAAOtE,MAAKa,QAAQhB,UAGxB4E,MAAO,SAAUrF,EAAOE,EAAKC,GACzB,MAAO+D,MAAK/D,IAAID,EAAKgE,KAAKhE,IAAIC,EAAKH,OAOvC4H,SAAU,IACVC,SAAS,EACTC,SA1PM,oUA2PNC,OACIC,OAAQ,KACRxH,gBAAiB,KACjBJ,IAAK,KACLG,gBAAiB,KACjB0H,MAAO,KACPtH,UAAW,KACXuH,QAAS,KACTnI,KAAM,KACNM,MAAO,KACPC,KAAM,KACNG,SAAU,KACVT,MAAO,KACPE,IAAK,KACLC,IAAK,KACLiH,WAAY,KACZ1G,aAAc,MAGlByH,KAAM,SAAUJ,EAAOvG,GAkCnB,QAAS4G,GAAU3E,EAAIC,GACd2E,GACAzI,EAAQ0I,UAAU7E,KAAO7D,EAAQ2I,OAAO9E,EAAIC,IACjD2E,EAAM5B,OAAOhD,EAAIC,GAGrB,QAAS8E,GAAW/E,EAAIC,GACf9D,EAAQ0I,UAAU7E,KAAO7D,EAAQ2I,OAAO9E,EAAIC,KACjD2E,EAAM3B,UACN2B,EAAMrG,QA1CV,GAAIyG,GAAWvH,EAAQC,YACvB4G,GAAM7H,IAAMN,EAAQ0I,UAAUP,EAAM7H,KAAO6H,EAAM7H,IAAMuI,EAASvI,IAChE6H,EAAM5H,IAAMP,EAAQ0I,UAAUP,EAAM5H,KAAO4H,EAAM5H,IAAMsI,EAAStI,IAChE4H,EAAM/H,MAAQJ,EAAQ0I,UAAUP,EAAM/H,OAAS+H,EAAM/H,MAAQyI,EAASzI,MACtE+H,EAAMhI,KAAOH,EAAQ0I,UAAUP,EAAMhI,MAAQgI,EAAMhI,KAAO0I,EAAS1I,KACnEgI,EAAM3H,IAAMR,EAAQ0I,UAAUP,EAAM3H,KAAO2H,EAAM3H,IAAMqI,EAASrI,IAChE2H,EAAM1H,MAAQT,EAAQ0I,UAAUP,EAAM1H,OAAS0H,EAAM1H,MAAQoI,EAASpI,MACtE0H,EAAMzH,KAAOV,EAAQ0I,UAAUP,EAAMzH,MAAQyH,EAAMzH,KAAOmI,EAASnI,KACnEyH,EAAMtH,SAAWb,EAAQ0I,UAAUP,EAAMtH,UAAYsH,EAAMtH,SAAWgI,EAAShI,SAC/EsH,EAAMpH,UAAYf,EAAQ0I,UAAUP,EAAMpH,WAAaoH,EAAMpH,UAAY8H,EAAS9H,UAClFoH,EAAMxH,gBAAkBX,EAAQ0I,UAAUP,EAAMxH,iBAAmBwH,EAAMxH,gBAAkBkI,EAASlI,gBACpGwH,EAAMvH,gBAAkBZ,EAAQ0I,UAAUP,EAAMvH,iBAAmBuH,EAAMvH,gBAAkBiI,EAASjI,gBACpGuH,EAAMX,WAAaxH,EAAQ0I,UAAUP,EAAMX,YAAcW,EAAMX,cAC/DW,EAAMrH,aAAed,EAAQ0I,UAAUP,EAAMrH,cAAgBqH,EAAMrH,aAAe+H,EAAS/H,YAE3F,IAAI2H,GAAQ,GAAI9G,GAAMC,EAASuG,EAE/BA,GAAMW,OAAO,QAASN,GAAW,GACjCL,EAAMW,OAAO,MAAON,GAAW,GAC/BL,EAAMW,OAAO,MAAON,GAAW,GAC/BL,EAAMW,OAAO,MAAOF,GAAY,GAChCT,EAAMW,OAAO,QAASF,GAAY,GAClCT,EAAMW,OAAO,OAAQF,GAAY,GACjCT,EAAMW,OAAO,OAAQF,GAAY,GACjCT,EAAMW,OAAO,WAAYF,GAAY,GACrCT,EAAMW,OAAO,kBAAmBF,GAAY,GAC5CT,EAAMW,OAAO,kBAAmBF,GAAY,GAC5CT,EAAMW,OAAO,aAAcF,GAAY,GACvCT,EAAMW,OAAO,eAAgBN,GAAW,GAExCL,EAAMY,IAAI,WAAY,cACtBZ,EAAMY,IAAI,UAAW,gBA1VjC/I,EACKgJ,OAAO,sBACPC,UAAU,UAAWvH,GACrBwH,SAAS,UAAWjJ,GAEzBA,EAAqBkJ,WAkCrBzH,EAAoByH,SAAW,YAoUjCnJ","file":"angularjs-gauge.min.js","sourcesContent":["(function (angular) {\r\n    'use strict';\r\n    angular\r\n        .module('angularjs-gauge', [])\r\n        .directive('ngGauge', gaugeMeterDirective)\r\n        .provider('ngGauge', gaugeMeterProviderFn);\r\n\r\n    gaugeMeterProviderFn.$inject = [];\r\n    function gaugeMeterProviderFn() {\r\n        var defaultOptions = {\r\n            size: 200,\r\n            value: undefined,\r\n            min: 0,\r\n            max: 100,\r\n            cap: 'butt',\r\n            thick: 6,\r\n            type: 'full',\r\n            foregroundColor: 'rgba(0, 150, 136, 1)',\r\n            backgroundColor: 'rgba(0, 0, 0, 0.1)',\r\n            duration: 1500,\r\n            fractionSize: null,\r\n            labelOnly: false,\r\n        };\r\n\r\n        this.setOptions = function (customOptions) {\r\n            if (!(customOptions && angular.isObject(customOptions)))\r\n                throw new Error('Invalid option type specified in the ngGaugeProvider');\r\n            defaultOptions = angular.merge(defaultOptions, customOptions);\r\n        };\r\n\r\n        var ngGauge = {\r\n            getOptions: function () {\r\n                return angular.extend({}, defaultOptions);\r\n            }\r\n        };\r\n\r\n        this.$get = function () {\r\n            return ngGauge;\r\n        };\r\n    }\r\n\r\n    gaugeMeterDirective.$inject = ['ngGauge'];\r\n\r\n    function gaugeMeterDirective(ngGauge) {\r\n\r\n\r\n        var tpl = '<div style=\"display:inline-block;text-align:center;position:relative;\">' +\r\n            '<span ng-show=\"{{!labelOnly}}\"><u>{{prepend}}</u>' +\r\n            '<span ng-if=\"fractionSize === null\">{{value | number}}</span>' +\r\n            '<span ng-if=\"fractionSize !== null\">{{value | number: fractionSize}}</span>' +\r\n            '<u>{{append}}</u></span>' +\r\n            '<b>{{ label }}</b>' +\r\n            '<canvas></canvas></div>';\r\n\r\n        var Gauge = function (element, options) {\r\n            this.element = element.find('canvas')[0];\r\n            this.text = element.find('span');\r\n            this.legend = element.find('b');\r\n            this.unit = element.find('u');\r\n            this.context = this.element.getContext('2d');\r\n            this.options = options;\r\n            this.init();\r\n        };\r\n\r\n        Gauge.prototype = {\r\n\r\n            init: function () {\r\n                this.setupStyles();\r\n                this.create(null, null);\r\n            },\r\n\r\n            setupStyles: function () {\r\n\r\n                this.context.canvas.width = this.options.size;\r\n                this.context.canvas.height = this.options.size;\r\n                this.context.lineCap = this.options.cap;\r\n                this.context.lineWidth = this.options.thick;\r\n\r\n                var lfs = this.options.size * 0.22,\r\n                    llh = this.options.size;\r\n\r\n                this.text.css({\r\n                    display: 'inline-block',\r\n                    fontWeight: 'normal',\r\n                    width: '100%',\r\n                    position: 'absolute',\r\n                    textAlign: 'center',\r\n                    overflow: 'hidden',\r\n                    textOverflow: 'ellipsis',\r\n                    fontSize: lfs + 'px',\r\n                    lineHeight: llh + 'px'\r\n                });\r\n\r\n                this.unit.css({\r\n                    textDecoration: 'none',\r\n                    fontSize: '0.6em',\r\n                    fontWeight: 200,\r\n                    opacity: 0.8\r\n                });\r\n\r\n                var fs = this.options.labelOnly ? lfs * 0.8 : this.options.size / 13;\r\n                var lh = this.options.labelOnly ? llh : (5 * fs) + parseInt(this.options.size);\r\n\r\n                this.legend.css({\r\n                    display: 'inline-block',\r\n                    width: '100%',\r\n                    position: 'absolute',\r\n                    textAlign: 'center',\r\n                    overflow: 'hidden',\r\n                    textOverflow: 'ellipsis',\r\n                    fontWeight: 'normal',\r\n                    fontSize: fs + 'px',\r\n                    lineHeight: lh + 'px'\r\n                });\r\n            },\r\n            create: function (nv, ov) {\r\n\r\n                var self = this,\r\n                    type = this.getType(),\r\n                    bounds = this.getBounds(type),\r\n                    duration = this.getDuration(),\r\n                    min = this.getMin(),\r\n                    max = this.getMax(),\r\n                    value = this.clamp(this.getValue(), min, max),\r\n                    start = bounds.head,\r\n                    unit = (bounds.tail - bounds.head) / (max - min),\r\n                    displacement = unit * (value - min),\r\n                    tail = bounds.tail,\r\n                    color = this.getForegroundColorByRange(value),\r\n                    requestID,\r\n                    startTime;\r\n\r\n                if (nv && ov) {\r\n                    displacement = unit * nv - unit * ov;\r\n                }\r\n\r\n                function animate(timestamp) {\r\n                    timestamp = timestamp || new Date().getTime();\r\n                    var runtime = timestamp - startTime;\r\n                    var progress = Math.min(runtime / duration, 1); // never exceed 100%\r\n                    var previousProgress = ov ? (ov * unit) : 0;\r\n                    var middle = start + previousProgress + displacement * progress;\r\n\r\n                    self.drawShell(start, middle, tail, color);\r\n                    if (runtime < duration) {\r\n                        requestID = window.requestAnimationFrame(function (timestamp) {\r\n                            animate(timestamp);\r\n                        });\r\n                    } else {\r\n                        cancelAnimationFrame(requestID);\r\n                    }\r\n                }\r\n\r\n                requestAnimationFrame(function (timestamp) {\r\n                    startTime = timestamp || new Date().getTime();\r\n                    animate(timestamp);\r\n                });\r\n\r\n            },\r\n\r\n            getBounds: function (type) {\r\n                var head, tail;\r\n                if (type == 'semi') {\r\n                    head = Math.PI;\r\n                    tail = 2 * Math.PI;\r\n                } else if (type == 'full') {\r\n                    head = 1.5 * Math.PI;\r\n                    tail = 3.5 * Math.PI;\r\n                } else if (type === 'arch') {\r\n                    head = 0.8 * Math.PI;\r\n                    tail = 2.2 * Math.PI;\r\n                }\r\n\r\n                return {\r\n                    head: head,\r\n                    tail: tail\r\n                };\r\n\r\n            },\r\n\r\n            drawShell: function (start, middle, tail, color) {\r\n                var\r\n                    context = this.context,\r\n                    center = this.getCenter(),\r\n                    radius = this.getRadius(),\r\n                    foregroundColor = color,\r\n                    backgroundColor = this.getBackgroundColor();\r\n\r\n                this.clear();\r\n\r\n                middle = Math.max(middle, start); // never below 0%\r\n                middle = Math.min(middle, tail); // never exceed 100%\r\n\r\n\r\n                context.beginPath();\r\n                context.strokeStyle = backgroundColor;\r\n                context.arc(center.x, center.y, radius, middle, tail, false);\r\n                context.stroke();\r\n\r\n                context.beginPath();\r\n                context.strokeStyle = foregroundColor;\r\n                context.arc(center.x, center.y, radius, start, middle, false);\r\n                context.stroke();\r\n\r\n            },\r\n\r\n            clear: function () {\r\n                this.context.clearRect(0, 0, this.getWidth(), this.getHeight());\r\n            },\r\n\r\n            update: function (nv, ov) {\r\n                this.create(nv, ov);\r\n            },\r\n\r\n            destroy: function () {\r\n                this.clear();\r\n            },\r\n\r\n            getRadius: function () {\r\n                var center = this.getCenter();\r\n                return center.x - this.getThickness();\r\n            },\r\n\r\n            getCenter: function () {\r\n                var x = this.getWidth() / 2,\r\n                    y = this.getHeight() / 2;\r\n                return {\r\n                    x: x,\r\n                    y: y\r\n                };\r\n            },\r\n\r\n            getValue: function () {\r\n                return this.options.value;\r\n            },\r\n            getMin: function () {\r\n                return this.options.min;\r\n            },\r\n            getMax: function () {\r\n                return this.options.max;\r\n            },\r\n            getWidth: function () {\r\n                return this.context.canvas.width;\r\n            },\r\n\r\n            getHeight: function () {\r\n                return this.context.canvas.height;\r\n            },\r\n\r\n            getThickness: function () {\r\n                return this.options.thick;\r\n            },\r\n\r\n            getBackgroundColor: function () {\r\n                return this.options.backgroundColor;\r\n            },\r\n\r\n            getForegroundColor: function () {\r\n                return this.options.foregroundColor;\r\n            },\r\n\r\n            getForegroundColorByRange: function (value) {\r\n\r\n                var isNumber = function (value) {\r\n                    return value != undefined && !isNaN(parseFloat(value)) && !isNaN(Number(value));\r\n                };\r\n\r\n                var match = Object.keys(this.options.thresholds)\r\n                    .filter(function (item) { return isNumber(item) && Number(item) <= value; })\r\n                    .sort(function(a,b) {return Number(a) > Number(b);}).reverse()[0];\r\n\r\n                return match !== undefined ? this.options.thresholds[match].color || this.getForegroundColor() : this.getForegroundColor();\r\n            },\r\n\r\n            getLineCap: function () {\r\n                return this.options.cap;\r\n            },\r\n\r\n            getType: function () {\r\n                return this.options.type;\r\n            },\r\n\r\n            getDuration: function () {\r\n                return this.options.duration;\r\n            },\r\n\r\n            clamp: function (value, min, max) {\r\n                return Math.max(min, Math.min(max, value));\r\n            }\r\n\r\n        };\r\n\r\n\r\n        return {\r\n            restrict: 'E',\r\n            replace: true,\r\n            template: tpl,\r\n            scope: {\r\n                append: '@?',\r\n                backgroundColor: '@?',\r\n                cap: '@?',\r\n                foregroundColor: '@?',\r\n                label: '@?',\r\n                labelOnly: '@?',\r\n                prepend: '@?',\r\n                size: '@?',\r\n                thick: '@?',\r\n                type: '@?',\r\n                duration: '@?',\r\n                value: '=?',\r\n                min: '=?',\r\n                max: '=?',\r\n                thresholds: '=?',\r\n                fractionSize: '=?'\r\n\r\n            },\r\n            link: function (scope, element) {\r\n                var defaults = ngGauge.getOptions(); // fetching default settings from provider\r\n                scope.min = angular.isDefined(scope.min) ? scope.min : defaults.min;\r\n                scope.max = angular.isDefined(scope.max) ? scope.max : defaults.max;\r\n                scope.value = angular.isDefined(scope.value) ? scope.value : defaults.value;\r\n                scope.size = angular.isDefined(scope.size) ? scope.size : defaults.size;\r\n                scope.cap = angular.isDefined(scope.cap) ? scope.cap : defaults.cap;\r\n                scope.thick = angular.isDefined(scope.thick) ? scope.thick : defaults.thick;\r\n                scope.type = angular.isDefined(scope.type) ? scope.type : defaults.type;\r\n                scope.duration = angular.isDefined(scope.duration) ? scope.duration : defaults.duration;\r\n                scope.labelOnly = angular.isDefined(scope.labelOnly) ? scope.labelOnly : defaults.labelOnly;\r\n                scope.foregroundColor = angular.isDefined(scope.foregroundColor) ? scope.foregroundColor : defaults.foregroundColor;\r\n                scope.backgroundColor = angular.isDefined(scope.backgroundColor) ? scope.backgroundColor : defaults.backgroundColor;\r\n                scope.thresholds = angular.isDefined(scope.thresholds) ? scope.thresholds : {};\r\n                scope.fractionSize = angular.isDefined(scope.fractionSize) ? scope.fractionSize : defaults.fractionSize;\r\n\r\n                var gauge = new Gauge(element, scope);\r\n\r\n                scope.$watch('value', watchData, false);\r\n                scope.$watch('min', watchData, false);\r\n                scope.$watch('max', watchData, false);\r\n                scope.$watch('cap', watchOther, false);\r\n                scope.$watch('thick', watchOther, false);\r\n                scope.$watch('type', watchOther, false);\r\n                scope.$watch('size', watchOther, false);\r\n                scope.$watch('duration', watchOther, false);\r\n                scope.$watch('foregroundColor', watchOther, false);\r\n                scope.$watch('backgroundColor', watchOther, false);\r\n                scope.$watch('thresholds', watchOther, false);\r\n                scope.$watch('fractionSize', watchData, false);\r\n\r\n                scope.$on('$destroy', function () { });\r\n                scope.$on('$resize', function () { });\r\n\r\n                function watchData(nv, ov) {\r\n                    if (!gauge) return;\r\n                    if (!angular.isDefined(nv) || angular.equals(nv, ov)) return;\r\n                    gauge.update(nv, ov);\r\n                }\r\n\r\n                function watchOther(nv, ov) {\r\n                    if (!angular.isDefined(nv) || angular.equals(nv, ov)) return;\r\n                    gauge.destroy();\r\n                    gauge.init();\r\n                }\r\n            }\r\n        };\r\n\r\n    }\r\n}(angular));\r\n"]}